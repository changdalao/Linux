/*
 *简单的HTTP服务器
 *
*/
#include<stdio.h>                                                                              
#include<unistd.h>
#include<stdlib.h>
#include<fcntl.h>
#include <sys/types.h>
#include <sys/socket.h>
#include<arpa/inet.h>
#include<netinet/in.h>
#include<string.h>

int main(int argc,char* argv[])
{
    if(argc!=3){
        perror("Usage: ./server [ip] [port]\n");
        return 1;
    }
    int sock=socket(AF_INET,SOCK_STREAM,0);//创建套接字
    if(sock<0){
        perror("socket");
        return 2;
    }

    struct sockaddr_in local;
    local.sin_family=AF_INET;
    local.sin_port=htons(atoi(argv[2]));
    local.sin_addr.s_addr=inet_addr(argv[1]);

    //绑定
    int ret=bind(sock,(struct sockaddr*)&local,sizeof(local));
    if(ret<0){
        perror("bind error");
        return 3;
    }
    //监听
    ret=listen(sock,5);
    if(ret<0){
        perror("listen error");
        return 4;
    }
    //接受信息
    while(1){
        struct sockaddr_in client;
        socklen_t len=sizeof(client);
        int new_sock=accept(sock,(struct sockaddr*)&client,&len);
        if(new_sock<0){
            perror("accept error");
            continue;
        }
        char buf[4096]={0};
        size_t size=read(new_sock,buf,sizeof(buf)-1);
        if(size<0){
            perror("read error");
            return 5;
        }
        printf("[request] %s",buf);
        char buf1[1024]={0};
        const char* hello="<hl>hello word</hl>";
        sprintf(buf1,"HTTP/1.0 200 OK\nContent-Length: %lu\n\n%s",strlen(hello),hello);
        write(new_sock,buf1,strlen(buf1));
    }
    return 0;
}
